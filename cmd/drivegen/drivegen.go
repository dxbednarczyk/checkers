package main

import (
	"encoding/json"
	"os"

	//nolint:revive
	. "github.com/dave/jennifer/jen"
	"github.com/dxbednarczyk/checkers"
)

type (
	DrivesJSON [][]any
	Drive      struct {
		Identifier string
		Offset     float64
		Score      float64
	}
)

func main() {
	gen := NewFilePathName("drives", "checkers")
	gen.PackageComment("This file is generated by drivegen.go. DO NOT EDIT.")

	driveFile, err := os.Open("bin/drives.json")
	if err != nil {
		panic(err)
	}

	var driveData DrivesJSON

	err = json.NewDecoder(driveFile).Decode(&driveData)
	if err != nil {
		panic(err)
	}

	drives := make([]checkers.Drive, 0, len(driveData))
	for _, drive := range driveData {
		drives = append(drives, checkers.ParseDrive(drive))
	}

	gen.Var().Id("Drives").Op("=").Index().Id("Drive").ValuesFunc(func(g *Group) {
		for _, drive := range drives {
			g.Id("Drive").Block(
				Id("Identifier").Op(":").Lit(drive.Identifier).Op(","),
				Id("Offset").Op(":").Lit(drive.Offset).Op(","),
				Id("Score").Op(":").Lit(drive.Score).Op(","),
			)
		}
	})

	err = gen.Save("drives.go")
	if err != nil {
		panic(err)
	}
}
