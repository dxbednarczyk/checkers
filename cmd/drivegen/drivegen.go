package main

import (
	"encoding/json"
	"os"
	"regexp"

	. "github.com/dave/jennifer/jen"
	"github.com/dxbednarczyk/checkers"
)

var (
	tsst       = regexp.MustCompile("TSSTcorp(BD|CD|DVD)")
	hlds       = regexp.MustCompile("HL-DT-ST(BD|CD|DVD)")
	special    = regexp.MustCompile(`^[ _-]+`)
	spacedash  = regexp.MustCompile(`\s+-\s`)
	multispace = regexp.MustCompile(`\s+`)
	revision   = regexp.MustCompile(`\(revision [a-zA-Z0-9\.\,\-]*\)`)
	adapter    = regexp.MustCompile(` Adapter.*$`)
)

type DrivesJSON [][]any
type Drive struct {
	Identifier string
	Offset     float64
	Score      float64
}

func main() {
	f := NewFilePathName("drives", "checkers")
	f.PackageComment("This file is generated by drivegen.go. DO NOT EDIT.")

	drives_file, err := os.Open("bin/drives.json")
	if err != nil {
		panic(err)
	}

	var driveData DrivesJSON

	err = json.NewDecoder(drives_file).Decode(&driveData)
	if err != nil {
		panic(err)
	}

	drives := make([]checkers.Drive, 0, len(driveData))
	for _, drive := range driveData {
		drives = append(drives, checkers.ParseDrive(drive))
	}

	f.Var().Id("Drives").Op("=").Index().Id("Drive").ValuesFunc(func(g *Group) {
		for _, drive := range drives {
			g.Id("Drive").Block(
				Id("Identifier").Op(":").Lit(drive.Identifier).Op(","),
				Id("Offset").Op(":").Lit(drive.Offset).Op(","),
				Id("Score").Op(":").Lit(drive.Score).Op(","),
			)
		}
	})

	f.Save("drives.go")
}
